{"abi":[{"type":"function","name":"eval4","inputs":[{"name":"eval","type":"tuple","internalType":"struct EvalV4","components":[{"name":"store","type":"address","internalType":"contract IInterpreterStoreV3"},{"name":"namespace","type":"uint256","internalType":"FullyQualifiedNamespace"},{"name":"bytecode","type":"bytes","internalType":"bytes"},{"name":"sourceIndex","type":"uint256","internalType":"SourceIndexV2"},{"name":"context","type":"bytes32[][]","internalType":"bytes32[][]"},{"name":"inputs","type":"bytes32[]","internalType":"StackItem[]"},{"name":"stateOverlay","type":"bytes32[]","internalType":"bytes32[]"}]}],"outputs":[{"name":"stack","type":"bytes32[]","internalType":"StackItem[]"},{"name":"writes","type":"bytes32[]","internalType":"bytes32[]"}],"stateMutability":"view"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"eval4((address,uint256,bytes,uint256,bytes32[][],bytes32[],bytes32[]))":"d04dfe23"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"contract IInterpreterStoreV3\",\"name\":\"store\",\"type\":\"address\"},{\"internalType\":\"FullyQualifiedNamespace\",\"name\":\"namespace\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"bytecode\",\"type\":\"bytes\"},{\"internalType\":\"SourceIndexV2\",\"name\":\"sourceIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[][]\",\"name\":\"context\",\"type\":\"bytes32[][]\"},{\"internalType\":\"StackItem[]\",\"name\":\"inputs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"stateOverlay\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct EvalV4\",\"name\":\"eval\",\"type\":\"tuple\"}],\"name\":\"eval4\",\"outputs\":[{\"internalType\":\"StackItem[]\",\"name\":\"stack\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"writes\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"IInterpreterV4 Interface into a standard interpreter that supports: - evaluating Rainlang logic provided as rain bytecode in calldata - receiving arbitrary `bytes32[][]` supporting context to be made available   to the evaluated logic via. context aware opcodes - receiving arbitrary `bytes32[]` inputs to be made available to the   evaluated logic as prepoluated stack items - receiving arbitrary `bytes32[]` stateOverlay to be applied to the   state before evaluation to facilitate \\\"what if\\\" analysis - handling subsequent state changes in bulk in response to evaluated logic - namespacing state changes according to the caller's preferences to avoid   unwanted key collisions The interface is designed to be stable across many versions and implementations of an interpreter, balancing minimalism with features required for a general purpose onchain interpreted compute environment. The security model of an interpreter is that it MUST be resilient to malicious expressions even if they dispatch arbitrary internal function pointers during an eval. The interpreter MAY return garbage or exhibit undefined behaviour or error during an eval, _provided that no state changes are persisted_ e.g. in storage, such that only the caller that specifies the malicious expression can be negatively impacted by the result. In turn, the caller must guard itself against arbitrarily corrupt/malicious reverts and return values from any interpreter that it requests an expression from. And so on and so forth up to the externally owned account (EOA) who signs the transaction and agrees to a specific combination of contracts, expressions and interpreters, who can presumably make an informed decision about which to trust. The state of an interpreter is expected to be stored in a store that is passed in as a parameter to the eval function. `eval4` will return the writes that are to be applied to the store after the evaluation is complete. The caller is responsible for applying these writes to the store, and is expected to pass them as-is.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"eval4((address,uint256,bytes,uint256,bytes32[][],bytes32[],bytes32[]))\":{\"notice\":\"Rainlang magic happens here. Pass Rainlang bytecode in calldata, and get back the stack and storage writes. Key differences in `eval4`: - Supports state overlays to facilitate \\\"what if\\\" analysis. Each item   of state in the overlay will override corresponding gets from the store   unless/until they are set to something else in the evaluated logic. - Numbers are treated as packed Rain decimal floats, NOT fixed point   decimals.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/rain.interpreter.interface/src/interface/unstable/IInterpreterV4.sol\":\"IInterpreterV4\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"appendCBOR\":false,\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[\":bytecode/=lib/rain.interpreter.interface/src/lib/bytecode/\",\":caller/=lib/rain.interpreter.interface/src/lib/caller/\",\":codegen/=lib/rain.interpreter.interface/src/lib/codegen/\",\":deprecated/=lib/rain.interpreter.interface/src/lib/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":mut/=lib/rain.interpreter.interface/lib/rain.math.float/lib/rain.string/src/lib/mut/\",\":ns/=lib/rain.interpreter.interface/src/lib/ns/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/rain.interpreter.interface/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":parse/=lib/rain.interpreter.interface/src/lib/parse/\",\":rain.datacontract/=lib/rain.interpreter.interface/lib/rain.math.float/lib/rain.datacontract/src/\",\":rain.extrospection/=lib/rain.factory/lib/rain.extrospection/\",\":rain.factory/=lib/rain.factory/src/\",\":rain.interpreter.interface/=lib/rain.interpreter.interface/src/\",\":rain.intorastring/=lib/rain.interpreter.interface/lib/rain.intorastring/src/\",\":rain.lib.hash/=lib/rain.interpreter.interface/lib/rain.lib.hash/src/\",\":rain.lib.typecast/=lib/rain.interpreter.interface/lib/rain.lib.typecast/src/\",\":rain.math.binary/=lib/rain.interpreter.interface/lib/rain.math.binary/src/\",\":rain.math.fixedpoint/=lib/rain.interpreter.interface/lib/rain.math.float/lib/rain.math.fixedpoint/src/\",\":rain.math.float/=lib/rain.interpreter.interface/lib/rain.math.float/\",\":rain.math.saturating/=lib/rain.interpreter.interface/lib/rain.math.float/lib/rain.math.fixedpoint/lib/rain.math.saturating/src/\",\":rain.sol.codegen/=lib/rain.interpreter.interface/lib/rain.sol.codegen/\",\":rain.solmem/=lib/rain.solmem/src/\",\":rain.string/=lib/rain.interpreter.interface/lib/rain.math.float/lib/rain.string/src/\"]},\"sources\":{\"lib/rain.interpreter.interface/src/interface/IInterpreterStoreV2.sol\":{\"keccak256\":\"0x89b7dfa624962983c42da404fc8653daa29e793a60f11a2d9c8a9cf34caaf71a\",\"license\":\"LicenseRef-DCL-1.0\",\"urls\":[\"bzz-raw://10dcc56124d4a054ad13227e6098b7ceda11bbeccd8bb38d1e57da542285f72d\",\"dweb:/ipfs/QmUSgcm3Hpifk4GyjGMssJfo2Pea9dMm9sP4AzyzGfVA5c\"]},\"lib/rain.interpreter.interface/src/interface/IInterpreterV3.sol\":{\"keccak256\":\"0xf7515e68c4ad0218beafff4f59e21bbaf6c1268499515e4b9c28326440c574e1\",\"license\":\"LicenseRef-DCL-1.0\",\"urls\":[\"bzz-raw://dc3ddb0928de02c43930be791cf3b9c4ab1f2aba2d8acc768f5c746b2e69fd20\",\"dweb:/ipfs/QmRyACpHRo4TQpmpuioQ43oMMaRTSiEt8MMuYzCiwZCGXL\"]},\"lib/rain.interpreter.interface/src/interface/deprecated/IInterpreterStoreV1.sol\":{\"keccak256\":\"0x7d2bc86fefbe372fc64381b320244fe9dbda1816867f3040c5bb3951869fe6a7\",\"license\":\"LicenseRef-DCL-1.0\",\"urls\":[\"bzz-raw://90c371494080129d5acd2bc52d092fc5cfe559147f7fc855ed01e62a7837f21e\",\"dweb:/ipfs/QmcNtPDuTxic8zqRFXf1ba6FJKmQXguxiDUY4E7wjyVwU5\"]},\"lib/rain.interpreter.interface/src/interface/deprecated/IInterpreterV1.sol\":{\"keccak256\":\"0xe0b94c771a7b6aa05388b4db6e238e36a4653cbfdbd3e54bbcaa7a97fc9491f4\",\"license\":\"LicenseRef-DCL-1.0\",\"urls\":[\"bzz-raw://59887a7f2ef60669906c5e70831ac0c9a7345313b04efb306235280f85e1db73\",\"dweb:/ipfs/QmP6Ny9m3sPCP65UmgGGpucSMgVAoDv6qURqyxUE95VU5Q\"]},\"lib/rain.interpreter.interface/src/interface/deprecated/IInterpreterV2.sol\":{\"keccak256\":\"0xa785ce2ac17059933b74aa3c8bd51321694ba8ddf27f2767ef99ea002faae1c6\",\"license\":\"LicenseRef-DCL-1.0\",\"urls\":[\"bzz-raw://130555df49552cf6865c4e82d6e67dd115151de2cd2161fb138849992d6a7a82\",\"dweb:/ipfs/QmRvrAGrkk3zgiG9Rox7m9wwzJL6B8ZcQAQvJpYKbvXvTS\"]},\"lib/rain.interpreter.interface/src/interface/unstable/IInterpreterStoreV3.sol\":{\"keccak256\":\"0xbfa8a7c8920c8aeeb821544d5dfcaae533fa4ddf5939f7c68fcc1df048e24756\",\"license\":\"LicenseRef-DCL-1.0\",\"urls\":[\"bzz-raw://7f46c0fde6d5adb57e0459a5864103c33191452b0656316bd4687ab32aa8c77d\",\"dweb:/ipfs/QmdCcxQAkK3RvDDuZpdZo4tr6oUf6PDhptfjr2dDTjsd4U\"]},\"lib/rain.interpreter.interface/src/interface/unstable/IInterpreterV4.sol\":{\"keccak256\":\"0x21328db6613f5d669637e97fefa1c17c4975e3af195e66a3ee538bd85c4a2ec4\",\"license\":\"LicenseRef-DCL-1.0\",\"urls\":[\"bzz-raw://1cca4fca2a64b39230242f7938ef25368753791c40a9e184755eb810c8b64054\",\"dweb:/ipfs/QmZMJ2EMX9wcfnD1WDpTrknRjGA3okymAPLw1Fbrqgz7N9\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.25+commit.b61c2a91"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"struct EvalV4","name":"eval","type":"tuple","components":[{"internalType":"contract IInterpreterStoreV3","name":"store","type":"address"},{"internalType":"FullyQualifiedNamespace","name":"namespace","type":"uint256"},{"internalType":"bytes","name":"bytecode","type":"bytes"},{"internalType":"SourceIndexV2","name":"sourceIndex","type":"uint256"},{"internalType":"bytes32[][]","name":"context","type":"bytes32[][]"},{"internalType":"StackItem[]","name":"inputs","type":"bytes32[]"},{"internalType":"bytes32[]","name":"stateOverlay","type":"bytes32[]"}]}],"stateMutability":"view","type":"function","name":"eval4","outputs":[{"internalType":"StackItem[]","name":"stack","type":"bytes32[]"},{"internalType":"bytes32[]","name":"writes","type":"bytes32[]"}]}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{"eval4((address,uint256,bytes,uint256,bytes32[][],bytes32[],bytes32[]))":{"notice":"Rainlang magic happens here. Pass Rainlang bytecode in calldata, and get back the stack and storage writes. Key differences in `eval4`: - Supports state overlays to facilitate \"what if\" analysis. Each item   of state in the overlay will override corresponding gets from the store   unless/until they are set to something else in the evaluated logic. - Numbers are treated as packed Rain decimal floats, NOT fixed point   decimals."}},"version":1}},"settings":{"remappings":["bytecode/=lib/rain.interpreter.interface/src/lib/bytecode/","caller/=lib/rain.interpreter.interface/src/lib/caller/","codegen/=lib/rain.interpreter.interface/src/lib/codegen/","deprecated/=lib/rain.interpreter.interface/src/lib/","ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","mut/=lib/rain.interpreter.interface/lib/rain.math.float/lib/rain.string/src/lib/mut/","ns/=lib/rain.interpreter.interface/src/lib/ns/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/rain.interpreter.interface/lib/openzeppelin-contracts/","openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/","parse/=lib/rain.interpreter.interface/src/lib/parse/","rain.datacontract/=lib/rain.interpreter.interface/lib/rain.math.float/lib/rain.datacontract/src/","rain.extrospection/=lib/rain.factory/lib/rain.extrospection/","rain.factory/=lib/rain.factory/src/","rain.interpreter.interface/=lib/rain.interpreter.interface/src/","rain.intorastring/=lib/rain.interpreter.interface/lib/rain.intorastring/src/","rain.lib.hash/=lib/rain.interpreter.interface/lib/rain.lib.hash/src/","rain.lib.typecast/=lib/rain.interpreter.interface/lib/rain.lib.typecast/src/","rain.math.binary/=lib/rain.interpreter.interface/lib/rain.math.binary/src/","rain.math.fixedpoint/=lib/rain.interpreter.interface/lib/rain.math.float/lib/rain.math.fixedpoint/src/","rain.math.float/=lib/rain.interpreter.interface/lib/rain.math.float/","rain.math.saturating/=lib/rain.interpreter.interface/lib/rain.math.float/lib/rain.math.fixedpoint/lib/rain.math.saturating/src/","rain.sol.codegen/=lib/rain.interpreter.interface/lib/rain.sol.codegen/","rain.solmem/=lib/rain.solmem/src/","rain.string/=lib/rain.interpreter.interface/lib/rain.math.float/lib/rain.string/src/"],"optimizer":{"enabled":true,"runs":100000},"metadata":{"bytecodeHash":"none","appendCBOR":false},"compilationTarget":{"lib/rain.interpreter.interface/src/interface/unstable/IInterpreterV4.sol":"IInterpreterV4"},"evmVersion":"paris","libraries":{}},"sources":{"lib/rain.interpreter.interface/src/interface/IInterpreterStoreV2.sol":{"keccak256":"0x89b7dfa624962983c42da404fc8653daa29e793a60f11a2d9c8a9cf34caaf71a","urls":["bzz-raw://10dcc56124d4a054ad13227e6098b7ceda11bbeccd8bb38d1e57da542285f72d","dweb:/ipfs/QmUSgcm3Hpifk4GyjGMssJfo2Pea9dMm9sP4AzyzGfVA5c"],"license":"LicenseRef-DCL-1.0"},"lib/rain.interpreter.interface/src/interface/IInterpreterV3.sol":{"keccak256":"0xf7515e68c4ad0218beafff4f59e21bbaf6c1268499515e4b9c28326440c574e1","urls":["bzz-raw://dc3ddb0928de02c43930be791cf3b9c4ab1f2aba2d8acc768f5c746b2e69fd20","dweb:/ipfs/QmRyACpHRo4TQpmpuioQ43oMMaRTSiEt8MMuYzCiwZCGXL"],"license":"LicenseRef-DCL-1.0"},"lib/rain.interpreter.interface/src/interface/deprecated/IInterpreterStoreV1.sol":{"keccak256":"0x7d2bc86fefbe372fc64381b320244fe9dbda1816867f3040c5bb3951869fe6a7","urls":["bzz-raw://90c371494080129d5acd2bc52d092fc5cfe559147f7fc855ed01e62a7837f21e","dweb:/ipfs/QmcNtPDuTxic8zqRFXf1ba6FJKmQXguxiDUY4E7wjyVwU5"],"license":"LicenseRef-DCL-1.0"},"lib/rain.interpreter.interface/src/interface/deprecated/IInterpreterV1.sol":{"keccak256":"0xe0b94c771a7b6aa05388b4db6e238e36a4653cbfdbd3e54bbcaa7a97fc9491f4","urls":["bzz-raw://59887a7f2ef60669906c5e70831ac0c9a7345313b04efb306235280f85e1db73","dweb:/ipfs/QmP6Ny9m3sPCP65UmgGGpucSMgVAoDv6qURqyxUE95VU5Q"],"license":"LicenseRef-DCL-1.0"},"lib/rain.interpreter.interface/src/interface/deprecated/IInterpreterV2.sol":{"keccak256":"0xa785ce2ac17059933b74aa3c8bd51321694ba8ddf27f2767ef99ea002faae1c6","urls":["bzz-raw://130555df49552cf6865c4e82d6e67dd115151de2cd2161fb138849992d6a7a82","dweb:/ipfs/QmRvrAGrkk3zgiG9Rox7m9wwzJL6B8ZcQAQvJpYKbvXvTS"],"license":"LicenseRef-DCL-1.0"},"lib/rain.interpreter.interface/src/interface/unstable/IInterpreterStoreV3.sol":{"keccak256":"0xbfa8a7c8920c8aeeb821544d5dfcaae533fa4ddf5939f7c68fcc1df048e24756","urls":["bzz-raw://7f46c0fde6d5adb57e0459a5864103c33191452b0656316bd4687ab32aa8c77d","dweb:/ipfs/QmdCcxQAkK3RvDDuZpdZo4tr6oUf6PDhptfjr2dDTjsd4U"],"license":"LicenseRef-DCL-1.0"},"lib/rain.interpreter.interface/src/interface/unstable/IInterpreterV4.sol":{"keccak256":"0x21328db6613f5d669637e97fefa1c17c4975e3af195e66a3ee538bd85c4a2ec4","urls":["bzz-raw://1cca4fca2a64b39230242f7938ef25368753791c40a9e184755eb810c8b64054","dweb:/ipfs/QmZMJ2EMX9wcfnD1WDpTrknRjGA3okymAPLw1Fbrqgz7N9"],"license":"LicenseRef-DCL-1.0"}},"version":1},"id":31}