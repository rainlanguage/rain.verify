{"abi":[{"type":"function","name":"afterAdd","inputs":[{"name":"adder_","type":"address","internalType":"address"},{"name":"evidences_","type":"tuple[]","internalType":"struct Evidence[]","components":[{"name":"account","type":"address","internalType":"address"},{"name":"data","type":"bytes","internalType":"bytes"}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"afterApprove","inputs":[{"name":"approver_","type":"address","internalType":"address"},{"name":"evidences_","type":"tuple[]","internalType":"struct Evidence[]","components":[{"name":"account","type":"address","internalType":"address"},{"name":"data","type":"bytes","internalType":"bytes"}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"afterBan","inputs":[{"name":"banner_","type":"address","internalType":"address"},{"name":"evidences_","type":"tuple[]","internalType":"struct Evidence[]","components":[{"name":"account","type":"address","internalType":"address"},{"name":"data","type":"bytes","internalType":"bytes"}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"afterRemove","inputs":[{"name":"remover_","type":"address","internalType":"address"},{"name":"evidences_","type":"tuple[]","internalType":"struct Evidence[]","components":[{"name":"account","type":"address","internalType":"address"},{"name":"data","type":"bytes","internalType":"bytes"}]}],"outputs":[],"stateMutability":"nonpayable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"afterAdd(address,(address,bytes)[])":"89bd6b26","afterApprove(address,(address,bytes)[])":"376dcbe2","afterBan(address,(address,bytes)[])":"8f6b1146","afterRemove(address,(address,bytes)[])":"ebae2d8c"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adder_\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Evidence[]\",\"name\":\"evidences_\",\"type\":\"tuple[]\"}],\"name\":\"afterAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver_\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Evidence[]\",\"name\":\"evidences_\",\"type\":\"tuple[]\"}],\"name\":\"afterApprove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"banner_\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Evidence[]\",\"name\":\"evidences_\",\"type\":\"tuple[]\"}],\"name\":\"afterBan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"remover_\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Evidence[]\",\"name\":\"evidences_\",\"type\":\"tuple[]\"}],\"name\":\"afterRemove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"afterAdd(address,(address,bytes)[])\":{\"params\":{\"adder_\":\"The `msg.sender` that authorized the additions. MAY be the addee without any specific role.\",\"evidences_\":\"All evidences associated with the additions.\"}},\"afterApprove(address,(address,bytes)[])\":{\"params\":{\"approver_\":\"The `msg.sender` that authorized the approvals.\",\"evidences_\":\"All evidences associated with the approvals.\"}},\"afterBan(address,(address,bytes)[])\":{\"params\":{\"banner_\":\"The `msg.sender` that authorized the bannings.\",\"evidences_\":\"All evidences associated with the bannings.\"}},\"afterRemove(address,(address,bytes)[])\":{\"params\":{\"evidences_\":\"All evidences associated with the removals.\",\"remover_\":\"The `msg.sender` that authorized the removals.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"afterAdd(address,(address,bytes)[])\":{\"notice\":\"Additional processing after a batch of additions. SHOULD revert/rollback transactions if processing fails.\"},\"afterApprove(address,(address,bytes)[])\":{\"notice\":\"Additional processing after a batch of approvals. SHOULD revert/rollback transactions if processing fails.\"},\"afterBan(address,(address,bytes)[])\":{\"notice\":\"Additional processing after a batch of bannings. SHOULD revert/rollback transactions if processing fails.\"},\"afterRemove(address,(address,bytes)[])\":{\"notice\":\"Additional processing after a batch of removals. SHOULD revert/rollback transactions if processing fails.\"}},\"notice\":\"Deployers of `Verify` contracts (e.g. via `VerifyFactory`) may want to apply additional processing and/or restrictions to each of the basic verification actions. Examples may be reading from onchain state or requiring token transfers to complete before allowing an add/approve to complete successfully. The reason this is an interface rather than implementors extending `Verify` directly is that it allows for more implementations to sit under a single `VerifyFactory` which in turn allows a more readily composed ecosystem of verified accounts. There's no reentrancy concerns for external calls from the `Verify` contract to the `IVerifyCallbackV1` contract because: - All the callbacks happen after state changes in `Verify` - All `Verify` actions are bound to the authority of the `msg.sender` The `IVerifyCallbackV1` contract can and should rollback transactions if their restrictions/processing requirements are not met, but otherwise have no more authority over the `Verify` state than anon users. The security model for platforms consuming `Verify` contracts is that they should index or otherwise filter children from the `VerifyFactory` down to those that also set a supported `IVerifyCallbackV1` contract. The factory is completely agnostic to callback concerns and doesn't even require that a callback contract be set at all.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/IVerifyCallbackV1.sol\":\"IVerifyCallbackV1\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"appendCBOR\":false,\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[\":bytecode/=lib/rain.interpreter.interface/src/lib/bytecode/\",\":caller/=lib/rain.interpreter.interface/src/lib/caller/\",\":codegen/=lib/rain.interpreter.interface/src/lib/codegen/\",\":deprecated/=lib/rain.interpreter.interface/src/lib/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":mut/=lib/rain.interpreter.interface/lib/rain.math.float/lib/rain.string/src/lib/mut/\",\":ns/=lib/rain.interpreter.interface/src/lib/ns/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/rain.interpreter.interface/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":parse/=lib/rain.interpreter.interface/src/lib/parse/\",\":rain.datacontract/=lib/rain.interpreter.interface/lib/rain.math.float/lib/rain.datacontract/src/\",\":rain.extrospection/=lib/rain.factory/lib/rain.extrospection/\",\":rain.factory/=lib/rain.factory/src/\",\":rain.interpreter.interface/=lib/rain.interpreter.interface/src/\",\":rain.intorastring/=lib/rain.interpreter.interface/lib/rain.intorastring/src/\",\":rain.lib.hash/=lib/rain.interpreter.interface/lib/rain.lib.hash/src/\",\":rain.lib.typecast/=lib/rain.interpreter.interface/lib/rain.lib.typecast/src/\",\":rain.math.binary/=lib/rain.interpreter.interface/lib/rain.math.binary/src/\",\":rain.math.fixedpoint/=lib/rain.interpreter.interface/lib/rain.math.float/lib/rain.math.fixedpoint/src/\",\":rain.math.float/=lib/rain.interpreter.interface/lib/rain.math.float/\",\":rain.math.saturating/=lib/rain.interpreter.interface/lib/rain.math.float/lib/rain.math.fixedpoint/lib/rain.math.saturating/src/\",\":rain.sol.codegen/=lib/rain.interpreter.interface/lib/rain.sol.codegen/\",\":rain.solmem/=lib/rain.solmem/src/\",\":rain.string/=lib/rain.interpreter.interface/lib/rain.math.float/lib/rain.string/src/\"]},\"sources\":{\"src/IVerifyCallbackV1.sol\":{\"keccak256\":\"0x6ddcfbfaa0c5c7550c28926b8f1a19132fabe55314e4ae553098eae276ab15c7\",\"license\":\"CAL\",\"urls\":[\"bzz-raw://63185f4282f38b8e5878380958a5ddc0a94926106883e9d5634ea74112156d44\",\"dweb:/ipfs/QmbrpPPDTvM7ds8qeeB3mxr8h6igHG6UGkEtWnSLzPPNNg\"]},\"src/LibEvidence.sol\":{\"keccak256\":\"0x97eea3ead2dac233f74c91b7c4c5ec28bb88a9a1c027c28c4646bea7d43eadc6\",\"license\":\"CAL\",\"urls\":[\"bzz-raw://65c0d226c4362fc7c13e97b8a5158a31314313ffae3a7249e1c90d5219053f5f\",\"dweb:/ipfs/QmbJhzPAVP1rmxDFja6gf3ok3y8VjBATux8g5W1EckNoBR\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.25+commit.b61c2a91"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"adder_","type":"address"},{"internalType":"struct Evidence[]","name":"evidences_","type":"tuple[]","components":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}]}],"stateMutability":"nonpayable","type":"function","name":"afterAdd"},{"inputs":[{"internalType":"address","name":"approver_","type":"address"},{"internalType":"struct Evidence[]","name":"evidences_","type":"tuple[]","components":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}]}],"stateMutability":"nonpayable","type":"function","name":"afterApprove"},{"inputs":[{"internalType":"address","name":"banner_","type":"address"},{"internalType":"struct Evidence[]","name":"evidences_","type":"tuple[]","components":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}]}],"stateMutability":"nonpayable","type":"function","name":"afterBan"},{"inputs":[{"internalType":"address","name":"remover_","type":"address"},{"internalType":"struct Evidence[]","name":"evidences_","type":"tuple[]","components":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}]}],"stateMutability":"nonpayable","type":"function","name":"afterRemove"}],"devdoc":{"kind":"dev","methods":{"afterAdd(address,(address,bytes)[])":{"params":{"adder_":"The `msg.sender` that authorized the additions. MAY be the addee without any specific role.","evidences_":"All evidences associated with the additions."}},"afterApprove(address,(address,bytes)[])":{"params":{"approver_":"The `msg.sender` that authorized the approvals.","evidences_":"All evidences associated with the approvals."}},"afterBan(address,(address,bytes)[])":{"params":{"banner_":"The `msg.sender` that authorized the bannings.","evidences_":"All evidences associated with the bannings."}},"afterRemove(address,(address,bytes)[])":{"params":{"evidences_":"All evidences associated with the removals.","remover_":"The `msg.sender` that authorized the removals."}}},"version":1},"userdoc":{"kind":"user","methods":{"afterAdd(address,(address,bytes)[])":{"notice":"Additional processing after a batch of additions. SHOULD revert/rollback transactions if processing fails."},"afterApprove(address,(address,bytes)[])":{"notice":"Additional processing after a batch of approvals. SHOULD revert/rollback transactions if processing fails."},"afterBan(address,(address,bytes)[])":{"notice":"Additional processing after a batch of bannings. SHOULD revert/rollback transactions if processing fails."},"afterRemove(address,(address,bytes)[])":{"notice":"Additional processing after a batch of removals. SHOULD revert/rollback transactions if processing fails."}},"version":1}},"settings":{"remappings":["bytecode/=lib/rain.interpreter.interface/src/lib/bytecode/","caller/=lib/rain.interpreter.interface/src/lib/caller/","codegen/=lib/rain.interpreter.interface/src/lib/codegen/","deprecated/=lib/rain.interpreter.interface/src/lib/","ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","mut/=lib/rain.interpreter.interface/lib/rain.math.float/lib/rain.string/src/lib/mut/","ns/=lib/rain.interpreter.interface/src/lib/ns/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/rain.interpreter.interface/lib/openzeppelin-contracts/","openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/","parse/=lib/rain.interpreter.interface/src/lib/parse/","rain.datacontract/=lib/rain.interpreter.interface/lib/rain.math.float/lib/rain.datacontract/src/","rain.extrospection/=lib/rain.factory/lib/rain.extrospection/","rain.factory/=lib/rain.factory/src/","rain.interpreter.interface/=lib/rain.interpreter.interface/src/","rain.intorastring/=lib/rain.interpreter.interface/lib/rain.intorastring/src/","rain.lib.hash/=lib/rain.interpreter.interface/lib/rain.lib.hash/src/","rain.lib.typecast/=lib/rain.interpreter.interface/lib/rain.lib.typecast/src/","rain.math.binary/=lib/rain.interpreter.interface/lib/rain.math.binary/src/","rain.math.fixedpoint/=lib/rain.interpreter.interface/lib/rain.math.float/lib/rain.math.fixedpoint/src/","rain.math.float/=lib/rain.interpreter.interface/lib/rain.math.float/","rain.math.saturating/=lib/rain.interpreter.interface/lib/rain.math.float/lib/rain.math.fixedpoint/lib/rain.math.saturating/src/","rain.sol.codegen/=lib/rain.interpreter.interface/lib/rain.sol.codegen/","rain.solmem/=lib/rain.solmem/src/","rain.string/=lib/rain.interpreter.interface/lib/rain.math.float/lib/rain.string/src/"],"optimizer":{"enabled":true,"runs":100000},"metadata":{"bytecodeHash":"none","appendCBOR":false},"compilationTarget":{"src/IVerifyCallbackV1.sol":"IVerifyCallbackV1"},"evmVersion":"paris","libraries":{}},"sources":{"src/IVerifyCallbackV1.sol":{"keccak256":"0x6ddcfbfaa0c5c7550c28926b8f1a19132fabe55314e4ae553098eae276ab15c7","urls":["bzz-raw://63185f4282f38b8e5878380958a5ddc0a94926106883e9d5634ea74112156d44","dweb:/ipfs/QmbrpPPDTvM7ds8qeeB3mxr8h6igHG6UGkEtWnSLzPPNNg"],"license":"CAL"},"src/LibEvidence.sol":{"keccak256":"0x97eea3ead2dac233f74c91b7c4c5ec28bb88a9a1c027c28c4646bea7d43eadc6","urls":["bzz-raw://65c0d226c4362fc7c13e97b8a5158a31314313ffae3a7249e1c90d5219053f5f","dweb:/ipfs/QmbJhzPAVP1rmxDFja6gf3ok3y8VjBATux8g5W1EckNoBR"],"license":"CAL"}},"version":1},"id":39}