{"abi":[{"type":"function","name":"deployExpression2","inputs":[{"name":"bytecode","type":"bytes","internalType":"bytes"},{"name":"constants","type":"uint256[]","internalType":"uint256[]"}],"outputs":[{"name":"interpreter","type":"address","internalType":"contract IInterpreterV2"},{"name":"store","type":"address","internalType":"contract IInterpreterStoreV2"},{"name":"expression","type":"address","internalType":"address"},{"name":"io","type":"bytes","internalType":"bytes"}],"stateMutability":"nonpayable"},{"type":"event","name":"DISPair","inputs":[{"name":"sender","type":"address","indexed":false,"internalType":"address"},{"name":"interpreter","type":"address","indexed":false,"internalType":"address"},{"name":"store","type":"address","indexed":false,"internalType":"address"},{"name":"parser","type":"address","indexed":false,"internalType":"address"},{"name":"meta","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false},{"type":"event","name":"DeployedExpression","inputs":[{"name":"sender","type":"address","indexed":false,"internalType":"address"},{"name":"interpreter","type":"address","indexed":false,"internalType":"contract IInterpreterV2"},{"name":"store","type":"address","indexed":false,"internalType":"contract IInterpreterStoreV2"},{"name":"expression","type":"address","indexed":false,"internalType":"address"},{"name":"io","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false},{"type":"event","name":"NewExpression","inputs":[{"name":"sender","type":"address","indexed":false,"internalType":"address"},{"name":"bytecode","type":"bytes","indexed":false,"internalType":"bytes"},{"name":"constants","type":"uint256[]","indexed":false,"internalType":"uint256[]"}],"anonymous":false}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"deployExpression2(bytes,uint256[])":"b7f14403"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"interpreter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"store\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"parser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"meta\",\"type\":\"bytes\"}],\"name\":\"DISPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IInterpreterV2\",\"name\":\"interpreter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IInterpreterStoreV2\",\"name\":\"store\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"expression\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"io\",\"type\":\"bytes\"}],\"name\":\"DeployedExpression\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"bytecode\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"constants\",\"type\":\"uint256[]\"}],\"name\":\"NewExpression\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"bytecode\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"constants\",\"type\":\"uint256[]\"}],\"name\":\"deployExpression2\",\"outputs\":[{\"internalType\":\"contract IInterpreterV2\",\"name\":\"interpreter\",\"type\":\"address\"},{\"internalType\":\"contract IInterpreterStoreV2\",\"name\":\"store\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"expression\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"io\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"DISPair(address,address,address,address,bytes)\":{\"params\":{\"interpreter\":\"The interpreter the deployer believes it is qualified to perform integrity checks on behalf of.\",\"meta\":\"The raw binary data of the construction meta. Maybe compressed data etc. and is intended for offchain consumption.\",\"parser\":\"The parser the deployer believes is compatible with the interpreter.\",\"sender\":\"The `msg.sender` providing the op meta.\",\"store\":\"The interpreter store the deployer believes is compatible with the interpreter.\"}},\"DeployedExpression(address,address,address,address,bytes)\":{\"params\":{\"expression\":\"As per `IExpressionDeployerV3.deployExpression2` return.\",\"interpreter\":\"As per `IExpressionDeployerV3.deployExpression2` return.\",\"io\":\"As per `IExpressionDeployerV3.deployExpression2` return.\",\"sender\":\"The caller of `deployExpression2`.\",\"store\":\"As per `IExpressionDeployerV3.deployExpression2` return.\"}},\"NewExpression(address,bytes,uint256[])\":{\"params\":{\"bytecode\":\"As per `IExpressionDeployerV3.deployExpression2` inputs.\",\"constants\":\"As per `IExpressionDeployerV3.deployExpression2` inputs.\",\"sender\":\"The caller of `deployExpression2`.\"}}},\"kind\":\"dev\",\"methods\":{\"deployExpression2(bytes,uint256[])\":{\"params\":{\"bytecode\":\"Bytecode verbatim. Exactly how the bytecode is structured is up to the deployer and interpreter. The deployer MUST NOT modify the bytecode in any way. The interpreter MUST NOT assume anything about the bytecode other than that it is valid according to the interpreter's integrity checks. It is assumed that the bytecode will be produced from a human friendly string via. `IParserV1.parse` but this is not required if the caller has some other means to prooduce valid bytecode.\",\"constants\":\"Constants verbatim. Constants are provided alongside sources rather than inline as it allows us to avoid variable length opcodes and can be more memory efficient if the same constant is referenced several times from the sources.\"},\"returns\":{\"expression\":\"The address of the deployed onchain expression. MUST be valid according to all integrity checks the deployer is aware of.\",\"interpreter\":\"The interpreter the deployer believes it is qualified to perform integrity checks on behalf of.\",\"io\":\"Binary data where each 2 bytes input and output counts for each source of the bytecode. MAY simply be copied verbatim from the relevant bytes in the bytecode if they exist and integrity checks guarantee that the bytecode is valid.\",\"store\":\"The interpreter store the deployer believes is compatible with the interpreter.\"}}},\"title\":\"IExpressionDeployerV3\",\"version\":1},\"userdoc\":{\"events\":{\"DISPair(address,address,address,address,bytes)\":{\"notice\":\"This is the literal InterpreterOpMeta bytes to be used offchain to make sense of the opcodes in this interpreter deployment, as a human. For formats like json that make heavy use of boilerplate, repetition and whitespace, some kind of compression is recommended. The DISPair is a pairing of: - Deployer (this contract) - Interpreter - Store - Parser\"},\"DeployedExpression(address,address,address,address,bytes)\":{\"notice\":\"The address of the deployed expression. MUST be emitted once the expression can be loaded and deserialized into an evaluable interpreter state.\"},\"NewExpression(address,bytes,uint256[])\":{\"notice\":\"The config of the deployed expression including uncompiled sources. MUST be emitted after the config passes the integrity check.\"}},\"kind\":\"user\",\"methods\":{\"deployExpression2(bytes,uint256[])\":{\"notice\":\"Expressions are expected to be deployed onchain as immutable contract code with a first class address like any other contract or account. Technically this is optional in the sense that all the tools required to eval some expression and define all its opcodes are available as libraries. In practise there are enough advantages to deploying the sources directly onchain as contract data and loading them from the interpreter at eval: - Loading and storing binary data is gas efficient as immutable contract   data - Expressions need to be immutable between their deploy time integrity   check and runtime evaluation - Passing the address of an expression through calldata to an interpreter   is cheaper than passing an entire expression through calldata - Conceptually a very simple approach, even if implementations like   SSTORE2 are subtle under the hood The expression deployer MUST perform an integrity check of the source code before it puts the expression onchain at a known address. The integrity check MUST at a minimum (it is free to do additional static analysis) calculate the memory required to be allocated for the stack in total, and that no out of bounds memory reads/writes occur within this stack. A simple example of an invalid source would be one that pushes one value to the stack then attempts to pops two values, clearly we cannot remove more values than we added. The `IExpressionDeployerV3` MUST revert in the case of any integrity failure, all integrity checks MUST pass in order for the deployment to complete. Once the integrity check is complete the `IExpressionDeployerV3` MUST do any additional processing required by its paired interpreter. For example, the `IExpressionDeployerV3` MAY NEED to replace the indexed opcodes in the `ExpressionConfig` sources with real function pointers from the corresponding interpreter. The caller MUST check the `io` returned by this function to determine the number of inputs and outputs for each source are within the bounds of the caller's expectations.\"}},\"notice\":\"Companion to `IInterpreterV2` responsible for onchain static code analysis and deploying expressions. Each `IExpressionDeployerV3` is tightly coupled at the bytecode level to some interpreter that it knows how to analyse and deploy expressions for. The expression deployer can perform an integrity check \\\"dry run\\\" of candidate source code for the intepreter. The critical analysis/transformation includes: - Enforcement of no out of bounds memory reads/writes - Calculation of memory required to eval the stack with a single allocation - Replacing index based opcodes with absolute interpreter function pointers - Enforcement that all opcodes and operands used exist and are valid This analysis is highly sensitive to the specific implementation and position of all opcodes and function pointers as compiled into the interpreter. This is what makes the coupling between an interpreter and expression deployer so tight. Ideally all responsibilities would be handled by a single contract but this introduces code size issues quickly by roughly doubling the compiled logic of each opcode (half for the integrity check and half for evaluation). Interpreters MUST assume that expression deployers are malicious and fail gracefully if the integrity check is corrupt/bypassed and/or function pointers are incorrect, etc. i.e. the interpreter MUST always return a stack from `eval` in a read only way or error. I.e. it is the expression deployer's responsibility to do everything it can to prevent undefined behaviour in the interpreter, and the interpreter's responsibility to handle the expression deployer completely failing to do so.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/rain.interpreter.interface/src/interface/deprecated/IExpressionDeployerV3.sol\":\"IExpressionDeployerV3\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"appendCBOR\":false,\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[\":bytecode/=lib/rain.interpreter.interface/src/lib/bytecode/\",\":caller/=lib/rain.interpreter.interface/src/lib/caller/\",\":codegen/=lib/rain.interpreter.interface/src/lib/codegen/\",\":deprecated/=lib/rain.interpreter.interface/src/lib/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":mut/=lib/rain.interpreter.interface/lib/rain.math.float/lib/rain.string/src/lib/mut/\",\":ns/=lib/rain.interpreter.interface/src/lib/ns/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/rain.interpreter.interface/lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":parse/=lib/rain.interpreter.interface/src/lib/parse/\",\":rain.datacontract/=lib/rain.interpreter.interface/lib/rain.math.float/lib/rain.datacontract/src/\",\":rain.extrospection/=lib/rain.factory/lib/rain.extrospection/\",\":rain.factory/=lib/rain.factory/src/\",\":rain.interpreter.interface/=lib/rain.interpreter.interface/src/\",\":rain.intorastring/=lib/rain.interpreter.interface/lib/rain.intorastring/src/\",\":rain.lib.hash/=lib/rain.interpreter.interface/lib/rain.lib.hash/src/\",\":rain.lib.typecast/=lib/rain.interpreter.interface/lib/rain.lib.typecast/src/\",\":rain.math.binary/=lib/rain.interpreter.interface/lib/rain.math.binary/src/\",\":rain.math.fixedpoint/=lib/rain.interpreter.interface/lib/rain.math.float/lib/rain.math.fixedpoint/src/\",\":rain.math.float/=lib/rain.interpreter.interface/lib/rain.math.float/\",\":rain.math.saturating/=lib/rain.interpreter.interface/lib/rain.math.float/lib/rain.math.fixedpoint/lib/rain.math.saturating/src/\",\":rain.sol.codegen/=lib/rain.interpreter.interface/lib/rain.sol.codegen/\",\":rain.solmem/=lib/rain.solmem/src/\",\":rain.string/=lib/rain.interpreter.interface/lib/rain.math.float/lib/rain.string/src/\"]},\"sources\":{\"lib/rain.interpreter.interface/src/interface/IInterpreterStoreV2.sol\":{\"keccak256\":\"0x89b7dfa624962983c42da404fc8653daa29e793a60f11a2d9c8a9cf34caaf71a\",\"license\":\"LicenseRef-DCL-1.0\",\"urls\":[\"bzz-raw://10dcc56124d4a054ad13227e6098b7ceda11bbeccd8bb38d1e57da542285f72d\",\"dweb:/ipfs/QmUSgcm3Hpifk4GyjGMssJfo2Pea9dMm9sP4AzyzGfVA5c\"]},\"lib/rain.interpreter.interface/src/interface/deprecated/IExpressionDeployerV3.sol\":{\"keccak256\":\"0x6f6b03c0f8e37ebe4275e0d27242754c7be815ff091ad0931a7be21ab11de628\",\"license\":\"LicenseRef-DCL-1.0\",\"urls\":[\"bzz-raw://1f200079a3689e0d0c8efb97040737a2b4113a82f0df5d8319af36d9ad5d8b97\",\"dweb:/ipfs/QmXFzXZasmD9D7pAYC5wBtB748TZajy69V5tmSEXRd1VZk\"]},\"lib/rain.interpreter.interface/src/interface/deprecated/IInterpreterStoreV1.sol\":{\"keccak256\":\"0x7d2bc86fefbe372fc64381b320244fe9dbda1816867f3040c5bb3951869fe6a7\",\"license\":\"LicenseRef-DCL-1.0\",\"urls\":[\"bzz-raw://90c371494080129d5acd2bc52d092fc5cfe559147f7fc855ed01e62a7837f21e\",\"dweb:/ipfs/QmcNtPDuTxic8zqRFXf1ba6FJKmQXguxiDUY4E7wjyVwU5\"]},\"lib/rain.interpreter.interface/src/interface/deprecated/IInterpreterV1.sol\":{\"keccak256\":\"0xe0b94c771a7b6aa05388b4db6e238e36a4653cbfdbd3e54bbcaa7a97fc9491f4\",\"license\":\"LicenseRef-DCL-1.0\",\"urls\":[\"bzz-raw://59887a7f2ef60669906c5e70831ac0c9a7345313b04efb306235280f85e1db73\",\"dweb:/ipfs/QmP6Ny9m3sPCP65UmgGGpucSMgVAoDv6qURqyxUE95VU5Q\"]},\"lib/rain.interpreter.interface/src/interface/deprecated/IInterpreterV2.sol\":{\"keccak256\":\"0xa785ce2ac17059933b74aa3c8bd51321694ba8ddf27f2767ef99ea002faae1c6\",\"license\":\"LicenseRef-DCL-1.0\",\"urls\":[\"bzz-raw://130555df49552cf6865c4e82d6e67dd115151de2cd2161fb138849992d6a7a82\",\"dweb:/ipfs/QmRvrAGrkk3zgiG9Rox7m9wwzJL6B8ZcQAQvJpYKbvXvTS\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.25+commit.b61c2a91"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address","indexed":false},{"internalType":"address","name":"interpreter","type":"address","indexed":false},{"internalType":"address","name":"store","type":"address","indexed":false},{"internalType":"address","name":"parser","type":"address","indexed":false},{"internalType":"bytes","name":"meta","type":"bytes","indexed":false}],"type":"event","name":"DISPair","anonymous":false},{"inputs":[{"internalType":"address","name":"sender","type":"address","indexed":false},{"internalType":"contract IInterpreterV2","name":"interpreter","type":"address","indexed":false},{"internalType":"contract IInterpreterStoreV2","name":"store","type":"address","indexed":false},{"internalType":"address","name":"expression","type":"address","indexed":false},{"internalType":"bytes","name":"io","type":"bytes","indexed":false}],"type":"event","name":"DeployedExpression","anonymous":false},{"inputs":[{"internalType":"address","name":"sender","type":"address","indexed":false},{"internalType":"bytes","name":"bytecode","type":"bytes","indexed":false},{"internalType":"uint256[]","name":"constants","type":"uint256[]","indexed":false}],"type":"event","name":"NewExpression","anonymous":false},{"inputs":[{"internalType":"bytes","name":"bytecode","type":"bytes"},{"internalType":"uint256[]","name":"constants","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function","name":"deployExpression2","outputs":[{"internalType":"contract IInterpreterV2","name":"interpreter","type":"address"},{"internalType":"contract IInterpreterStoreV2","name":"store","type":"address"},{"internalType":"address","name":"expression","type":"address"},{"internalType":"bytes","name":"io","type":"bytes"}]}],"devdoc":{"kind":"dev","methods":{"deployExpression2(bytes,uint256[])":{"params":{"bytecode":"Bytecode verbatim. Exactly how the bytecode is structured is up to the deployer and interpreter. The deployer MUST NOT modify the bytecode in any way. The interpreter MUST NOT assume anything about the bytecode other than that it is valid according to the interpreter's integrity checks. It is assumed that the bytecode will be produced from a human friendly string via. `IParserV1.parse` but this is not required if the caller has some other means to prooduce valid bytecode.","constants":"Constants verbatim. Constants are provided alongside sources rather than inline as it allows us to avoid variable length opcodes and can be more memory efficient if the same constant is referenced several times from the sources."},"returns":{"expression":"The address of the deployed onchain expression. MUST be valid according to all integrity checks the deployer is aware of.","interpreter":"The interpreter the deployer believes it is qualified to perform integrity checks on behalf of.","io":"Binary data where each 2 bytes input and output counts for each source of the bytecode. MAY simply be copied verbatim from the relevant bytes in the bytecode if they exist and integrity checks guarantee that the bytecode is valid.","store":"The interpreter store the deployer believes is compatible with the interpreter."}}},"version":1},"userdoc":{"kind":"user","methods":{"deployExpression2(bytes,uint256[])":{"notice":"Expressions are expected to be deployed onchain as immutable contract code with a first class address like any other contract or account. Technically this is optional in the sense that all the tools required to eval some expression and define all its opcodes are available as libraries. In practise there are enough advantages to deploying the sources directly onchain as contract data and loading them from the interpreter at eval: - Loading and storing binary data is gas efficient as immutable contract   data - Expressions need to be immutable between their deploy time integrity   check and runtime evaluation - Passing the address of an expression through calldata to an interpreter   is cheaper than passing an entire expression through calldata - Conceptually a very simple approach, even if implementations like   SSTORE2 are subtle under the hood The expression deployer MUST perform an integrity check of the source code before it puts the expression onchain at a known address. The integrity check MUST at a minimum (it is free to do additional static analysis) calculate the memory required to be allocated for the stack in total, and that no out of bounds memory reads/writes occur within this stack. A simple example of an invalid source would be one that pushes one value to the stack then attempts to pops two values, clearly we cannot remove more values than we added. The `IExpressionDeployerV3` MUST revert in the case of any integrity failure, all integrity checks MUST pass in order for the deployment to complete. Once the integrity check is complete the `IExpressionDeployerV3` MUST do any additional processing required by its paired interpreter. For example, the `IExpressionDeployerV3` MAY NEED to replace the indexed opcodes in the `ExpressionConfig` sources with real function pointers from the corresponding interpreter. The caller MUST check the `io` returned by this function to determine the number of inputs and outputs for each source are within the bounds of the caller's expectations."}},"version":1}},"settings":{"remappings":["bytecode/=lib/rain.interpreter.interface/src/lib/bytecode/","caller/=lib/rain.interpreter.interface/src/lib/caller/","codegen/=lib/rain.interpreter.interface/src/lib/codegen/","deprecated/=lib/rain.interpreter.interface/src/lib/","ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","mut/=lib/rain.interpreter.interface/lib/rain.math.float/lib/rain.string/src/lib/mut/","ns/=lib/rain.interpreter.interface/src/lib/ns/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/rain.interpreter.interface/lib/openzeppelin-contracts/","openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/","parse/=lib/rain.interpreter.interface/src/lib/parse/","rain.datacontract/=lib/rain.interpreter.interface/lib/rain.math.float/lib/rain.datacontract/src/","rain.extrospection/=lib/rain.factory/lib/rain.extrospection/","rain.factory/=lib/rain.factory/src/","rain.interpreter.interface/=lib/rain.interpreter.interface/src/","rain.intorastring/=lib/rain.interpreter.interface/lib/rain.intorastring/src/","rain.lib.hash/=lib/rain.interpreter.interface/lib/rain.lib.hash/src/","rain.lib.typecast/=lib/rain.interpreter.interface/lib/rain.lib.typecast/src/","rain.math.binary/=lib/rain.interpreter.interface/lib/rain.math.binary/src/","rain.math.fixedpoint/=lib/rain.interpreter.interface/lib/rain.math.float/lib/rain.math.fixedpoint/src/","rain.math.float/=lib/rain.interpreter.interface/lib/rain.math.float/","rain.math.saturating/=lib/rain.interpreter.interface/lib/rain.math.float/lib/rain.math.fixedpoint/lib/rain.math.saturating/src/","rain.sol.codegen/=lib/rain.interpreter.interface/lib/rain.sol.codegen/","rain.solmem/=lib/rain.solmem/src/","rain.string/=lib/rain.interpreter.interface/lib/rain.math.float/lib/rain.string/src/"],"optimizer":{"enabled":true,"runs":100000},"metadata":{"bytecodeHash":"none","appendCBOR":false},"compilationTarget":{"lib/rain.interpreter.interface/src/interface/deprecated/IExpressionDeployerV3.sol":"IExpressionDeployerV3"},"evmVersion":"paris","libraries":{}},"sources":{"lib/rain.interpreter.interface/src/interface/IInterpreterStoreV2.sol":{"keccak256":"0x89b7dfa624962983c42da404fc8653daa29e793a60f11a2d9c8a9cf34caaf71a","urls":["bzz-raw://10dcc56124d4a054ad13227e6098b7ceda11bbeccd8bb38d1e57da542285f72d","dweb:/ipfs/QmUSgcm3Hpifk4GyjGMssJfo2Pea9dMm9sP4AzyzGfVA5c"],"license":"LicenseRef-DCL-1.0"},"lib/rain.interpreter.interface/src/interface/deprecated/IExpressionDeployerV3.sol":{"keccak256":"0x6f6b03c0f8e37ebe4275e0d27242754c7be815ff091ad0931a7be21ab11de628","urls":["bzz-raw://1f200079a3689e0d0c8efb97040737a2b4113a82f0df5d8319af36d9ad5d8b97","dweb:/ipfs/QmXFzXZasmD9D7pAYC5wBtB748TZajy69V5tmSEXRd1VZk"],"license":"LicenseRef-DCL-1.0"},"lib/rain.interpreter.interface/src/interface/deprecated/IInterpreterStoreV1.sol":{"keccak256":"0x7d2bc86fefbe372fc64381b320244fe9dbda1816867f3040c5bb3951869fe6a7","urls":["bzz-raw://90c371494080129d5acd2bc52d092fc5cfe559147f7fc855ed01e62a7837f21e","dweb:/ipfs/QmcNtPDuTxic8zqRFXf1ba6FJKmQXguxiDUY4E7wjyVwU5"],"license":"LicenseRef-DCL-1.0"},"lib/rain.interpreter.interface/src/interface/deprecated/IInterpreterV1.sol":{"keccak256":"0xe0b94c771a7b6aa05388b4db6e238e36a4653cbfdbd3e54bbcaa7a97fc9491f4","urls":["bzz-raw://59887a7f2ef60669906c5e70831ac0c9a7345313b04efb306235280f85e1db73","dweb:/ipfs/QmP6Ny9m3sPCP65UmgGGpucSMgVAoDv6qURqyxUE95VU5Q"],"license":"LicenseRef-DCL-1.0"},"lib/rain.interpreter.interface/src/interface/deprecated/IInterpreterV2.sol":{"keccak256":"0xa785ce2ac17059933b74aa3c8bd51321694ba8ddf27f2767ef99ea002faae1c6","urls":["bzz-raw://130555df49552cf6865c4e82d6e67dd115151de2cd2161fb138849992d6a7a82","dweb:/ipfs/QmRvrAGrkk3zgiG9Rox7m9wwzJL6B8ZcQAQvJpYKbvXvTS"],"license":"LicenseRef-DCL-1.0"}},"version":1},"id":23}